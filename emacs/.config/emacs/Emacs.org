#+title TheGreatMcPain's Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Welcome!
This is my Emacs configuration it's mostly based on the configuration from SystemCrafter's Emacs From Scratch series on Youtube. This Org Mode file is designed to generate the ~init.el~ configuration file which is loaded by Emacs on startup.

The following variables will need to be adjusted for your machine.

#+begin_src emacs-lisp
  
  ;; NOTE: init.el is generated from Emacs.org. Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  
  (defun jimjam/get-font-size ()
    (if (string-equal (system-name) "james-gentoo-laptop") 100 120))
  
  ;; You will most likely need to adjust this font size for your system!
  (defvar jimjam/default-font-size (jimjam/get-font-size))
  (defvar jimjam/default-variable-font-size (jimjam/get-font-size))
  
  ;; Transparency Level
  (defvar jimjam/frame-transparency '(90 . 90))
  
#+end_src

* Indentation Setup
I prefer that emacs doesn't insert actual tab characters when indenting.

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil
                tab-width 4)

#+end_src

* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes. Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun jimjam/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'jimjam/display-startup-time)

#+end_src

* Package System Setup
Emacs has a built-in package manager but it doesn't make it easy to automatically install packages on a new system that first time you pull down you configuration. [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

We also want to prevent ~package.el~ from loading on startup. (Written to ~early-init.el~)

#+begin_src emacs-lisp :tangle ./early-init.el
  
  (setq package-enable-at-startup nil)
  
#+end_src

* Automatic Package Updates (currently disabled, because of 'straight.el')
Since we are currently using straight.el I've disabled this, because auto-package-update doesn't support it yet.

The auto-package-update package helps us keep our Emacs packages up to date! It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can use ~M-x auto-package-update-now~ to update right now!

#+begin_src emacs-lisp

  ;; (use-package auto-package-update
  ;;   :custom
  ;;   (auto-package-update-interval 7)
  ;;   (auto-package-update-prompt-before-update t)
  ;;   (auto-package-update-hide-results t)
  ;;   :config
  ;;   (auto-package-update-maybe)
  ;;   (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean
We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean! It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Disable 'deprecated' warnings

#+begin_src emacs-lisp :tangle ./early-init.el 
  
  (setq byte-compile-warnings '(not obsolete))
  
#+end_src

* native-comp settings
Settings related to the native-comp feature in emacs 28

#+begin_src emacs-lisp
  
  ;; Disable warnings from async compiler.
  (setq native-comp-async-report-warnings-errors nil)
  
#+end_src

* Use newer Tramp version
tramp-mode is a built-in emacs package that handles remote file editing.  The current version available through emacs-27 doesn't play nice with lsp-mode well, so we grab the latest version.

#+begin_src emacs-lisp
  
  ;; Emacs 28 hasn't been released yet this means we can assume that
  ;; the tramp version will be too old if the emacs version is under 28.
  (if (< emacs-major-version 28)
      (use-package tramp
        :straight (tramp :build t :pre-build (("make" "autoloads")))
        :config
        (setq tramp-yesno-prompt-regexp (concat
                                         (regexp-opt
                                          '("Are you sure you want to continue connecting (yes/no)?"
                                            "Are you sure you want to continue connecting (yes/no/[fingerprint])?")
                                          t)
                                         "\\s-*"))))
  
#+end_src

* Basic UI Configuration
This section configures basic UI settings that remove elements to make Emacs look a lot more minimal and modern. If you're just getting started in Emacs, the menu bar might be helpful so you can remove the ~(menu-bar-mode -1)~ line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1)   ; Disable the toolbar
  (tooltip-mode -1)    ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room

  (menu-bar-mode -1)   ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)                  ;; Show line numbers
  (global-display-line-numbers-mode t)  ;; Enable line numbers globally
  (show-paren-mode 1)                   ;; Highlight delimiters

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha jimjam/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,jimjam/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Don't set background color if using 'emacs -nw'
  (defun set-background-for-terminal (&optional frame)
    (or frame (setq frame (selected-frame)))
    "unsets the background color in terminal mode"
    (unless (display-graphic-p frame)
      (set-face-background 'default "unspecified-bg" frame)))
  (add-hook 'after-make-frame-functions 'set-background-for-terminal)
  (add-hook 'window-setup-hook 'set-background-for-terminal)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  ranger-mode-hook
                  ranger-preview-dir-hook
                  ranger-parent-dir-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration
I am using the Nerdfont patched version of Hack, and Noto Sans for this configuration.

#+begin_src emacs-lisp

  (defun jimjam/set-font-faces ()
    (message "Setting faces!")
    (set-face-attribute 'default nil :font "Hack Nerd Font Mono" :height jimjam/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font Mono" :height jimjam/default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Noto Sans" :height jimjam/default-font-size :weight 'regular))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (jimjam/set-font-faces))))
    (jimjam/set-font-faces))

#+end_src

* Keybinding Configuration
This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience. [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key. [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

We'll also setup [[https://github.com/emacsmirror/undo-fu][undo-fu]] for ~evil-mode~ to proper simulate vim's undo.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer jimjam/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (jimjam/leader-keys
     "t" '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package undo-fu)

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)

    ; (evil-ex-define-cmd "q" 'kill-this-buffer)
    ; (evil-ex-define-cmd "quit" 'evil-quit)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers.
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* UI Configuration
** Color Theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes. Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best. You can also run ~M-x counsel-load-theme~ to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-gruvbox t))

#+end_src

** Better Modeline
doom-modeline is a very attractive and rich (yet still minimal) mode line configuration for Emacs. The default configuration is quite good but you can check out the configuration options for more things you can enable disable.

NOTE: The first time you load your configuration on a new machine, you'll need to run ~M-x all-the-icons-install-fonts~ so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 25))

#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix. For example, if you press ~C-c~ (hold control and press the letter ~c~), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run. This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

** Ivy and Counsel
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace ~find-file~ with ~counsel-find-file~, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp
  
  (use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
  
  (use-package ivy
    :diminish
    :bind (
           ("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
  
#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs’ ~describe-~ command buffers. For example, if you use ~describe-function~, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling
This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen. We define a hydra that is bound to ~C-s t s~ and, once activated, ~j~ and ~k~ increase and decrease the text scale. You can press any other key (or ~f~ specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (jimjam/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better font Faces
The ~jimjam/org-font-setup~ function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document in ~org-mode~. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun jimjam/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Noto Sans" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config
This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates. There's a lot to unpack in here so I'd recommand watching Emacs From Scratch [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp
  
  (defun jimjam/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))
  
  (use-package org
    :hook (org-mode . jimjam/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
  
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
  
    (setq org-agenda-files
          '((concat user-emacs-directory "OrgFiles/Tasks.org")
            (concat user-emacs-directory "OrgFiles/Habits.org")
            (concat user-emacs-directory "OrgFiles/Birthdays.org")))
  
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
  
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
  
    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))
  
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
    (setq org-tag-alist
          '((:startgroup)
            ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
  
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
  
      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))
  
      ("W" "Work Tasks" tags-todo "+work-email")
  
      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))
  
      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))
  
    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp (concat user-emacs-directory "OrgFiles/Tasks.org") "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
  
        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree (concat user-emacs-directory "OrgFiles/Journal.org"))
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree (concat user-emacs-directory "OrgFiles/Journal.org"))
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
  
        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree (concat user-emacs-directory "OrgFiles/Journal.org"))
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)
  
        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline (concat user-emacs-directory "OrgFiles/Metrics.org") "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
  
    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))
  
    (setq org-image-actual-width nil)
  
    (jimjam/org-font-setup))
  
#+end_src

** Nicer Heading Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in ~org-mode~ buffers with nicer looking characters that you can control.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center Org Buffers
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center ~org-mode~ buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.

#+begin_src emacs-lisp

  (defun jimjam/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jimjam/org-mode-visual-fill))

#+end_src

** Configure Babel Languages
To execute or export code in ~org-mode~ code blocks, you’ll need to set up ~org-babel-load-languages~ for each language you’d like to use. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with ~org-babel~.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Src Block Templates

#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle Configuration Files
This snippet adds a hook to ~org-mode~ buffers so that ~efs/org-babel-tangle-config~ gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun jimjam/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name (concat user-emacs-directory "Emacs.org")))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jimjam/org-babel-tangle-config)))

#+end_src

* Development
** Commenting

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Snippets
Use snippets via yasnippet. Also install yasnippet-snippets for a good snippet collection.

#+begin_src emacs-lisp

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config (yas-reload-all))

  (use-package yasnippet-snippets)

#+end_src

** Languages
*** Language Servers
**** lsp-mode
We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. Before trying to set up ~lsp-mode~ for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The ~lsp-keymap-prefix~ setting enables you to define a prefix for where ~lsp-mode~'s default keybindings will be added. *I highly recommand* using the prefix to find out what you can do with ~lsp-mode~ in a buffer.

The ~which-key~ integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing ~C-c l~ in a ~lsp-mode~ buffer and trying different things that you find there.

#+begin_src emacs-lisp
  
  (defun jimjam/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-setments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))
  
  ;; Use my fork as it contains fixes for tramp.
  (use-package lsp-mode
    :straight (lsp-mode :type git :host github :repo "emacs-lsp/lsp-mode"
                        :fork (:host github
                               :repo "TheGreatMcPain/lsp-mode"))
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . jimjam/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l") ;; Or "C-l", "s-l"
    :custom
    (lsp-enable-on-type-formatting nil)
    :config
    (lsp-enable-which-key-integration t)
    (progn
      (lsp-register-client
       (make-lsp-client :new-connection (lsp-tramp-connection "/usr/lib/llvm/12/bin/clangd")
                        :major-modes '(c-mode c++-mode objc-mode cuda-mode)
                        :remote? t
                        :server-id 'clangd-remote)))
    )
  
#+end_src

**** lsp-ui
[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set if UI enhancements built on top of ~lsp-mode~ which make Emacs feel even more like an IDE. Check out the screenshots on the ~lsp-ui~ homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs
[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with ~M-x~:
- ~lsp-treemacs-symbols~ - Show a tree view of the symbols in the current file
- ~lsp-treemacs-references~ - Show a tree view for the references of the symbol under the cursor
- ~lsp-treemacs-error-list~ - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with ~lsp-mode~ to make it easy to search for things by name in your code. When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code. Results will be populated in the minibuffer so that you can find what you’re looking for and jump to that location in the code upon selecting the result.

Try these commands with ~M-x~:
- ~lsp-ivy-workspace-symbol~ - Search for a symbol name in the current project workspace
- ~lsp-ivy-global-workspace-symbol~ - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

*** TypeScript
This is a basic configuration for the TypeScript language so that ~.ts~ files activate ~typescript-mode~ when opened. We’re also adding a hook to ~typescript-mode-hook~ to call ~lsp-deferred~ so that we activate ~lsp-mode~ to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!* For ~lsp-mode~ to work with TypeScript (and JavaScript) you will need to install a language server on your machine. If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell

  npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the typescript compiler package.

*** Python
I like to at least keep somethings consistant between my Emacs and NeoVim configurations, so I'm using pyright.

#+begin_src emacs-lisp

  (use-package lsp-pyright)

  (use-package python-mode
    :hook (python-mode . lsp-deferred))

#+end_src

*** C/C++
**** member-functions.el
[[https://www.emacswiki.org/emacs/ExpandMemberFunctions][member-functions.el]] is a elisp file that contains a function that creates member functions in implementation files based on the contents of the open header file.

#+begin_src emacs-lisp
  
  (defun jimjam/setup-member-functions ()
    ;; Download member-functions.el, if not there already, from emacswiki and load it.
    (let ((member-functions-file
           (expand-file-name "lisp/member-functions.el" user-emacs-directory)))
      (unless (file-exists-p member-functions-file)
        (require 'url)
        (make-directory (file-name-directory member-functions-file))
        (url-copy-file "https://gitlab.com/TheGreatMcPain/emacs-member-functions/-/raw/master/member-functions.el"
                       member-functions-file))
      (add-to-list 'load-path (file-name-directory member-functions-file))
      (load "member-functions")))
  
#+end_src

**** cc-mode configuration
Not much going on here right now. We are basically using clangd as our language server and lsp-mode handles the rest.
We also set the default coding style to "linux" which is close to the custom style doom-emacs uses.

#+begin_src emacs-lisp
  
  (defun jimjam/cc-mode-startup-stuff ()
    (interactive)
    (jimjam/setup-member-functions)
    (lsp-deferred))
  
  (setq c-default-style "linux"
        c-basic-offset 2)
  
  (use-package cc-mode
    :hook ((c-mode c++-mode objc-mode cuda-mode) . jimjam/cc-mode-startup-stuff))
  
#+end_src

*** Java

#+begin_src emacs-lisp
  
  (use-package lsp-java
    :config
    (setq lsp-java-java-path "/opt/openjdk-bin-11/bin/java")
    (add-hook 'java-mode-hook 'lsp))
  
#+end_src

*** Dot (graphviz)
dot is Small language for making graphs.

#+begin_src emacs-lisp
  
  (use-package graphviz-dot-mode
    :after company
    :config
    (setq graphviz-dot-indent-width 4)
    (load "company-graphviz-dot"))
  
#+end_src

*** Yaml
Pretty much explains itself.

#+begin_src emacs-lisp

  (use-package yaml-mode
    :mode "Procfile\\'"
    :hook (yaml-mode . lsp-deferred))

#+end_src

** Company Mode
[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than ~completion-at-point~ which is more reminiscent of what you would expect from an IDE. We add a simple configuration to make the keybindings a little more useful (~TAB~ now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    ; :after lsp-mode
    ; :hook (lsp-mode . company-mode)
    :config (global-company-mode t)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selecion))
          (:map lsp-mode-map
                ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Code formatting

#+begin_src emacs-lisp
  
  (use-package format-all)
  
#+end_src

** Projectile
[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages. Many packages integrate with Projectile so it’s a good idea to have it installed even if you don’t use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/git-repos")
      (setq projectile-project-search-path '("~/git-repos")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit
[[https://magit.vc/][Magit]] is the best Git interface I’ve ever used. Common Git operations are easy to execute quickly using Magit’s command panel system.

#+begin_src emacs-lisp
  
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  
  ;; NOTE: Make sure to configure a Github token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  ;; (use-package forge)
  
#+end_src

** Git-Gutter
GitGutter is a package that adds 'diff markers' on the editor's 'gutter' (The gutter is also where line numbers are shown).
Along with diff markers GitGutter also allows staging, and unstaging inside the file's buffer.

#+begin_src emacs-lisp
  
  (use-package git-gutter
    :config
    (global-git-gutter-mode t)
    (git-gutter:linum-setup)
    (global-set-key (kbd "C-x C-g") 'git-gutter)
    (global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)
  
    ;; Jump to next/previous hunk
    (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
    (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)
  
    ;; Stage current hunk
    (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
  
    ;; Revert current hunk
    (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
  
    ;; Mark current hunk
    (global-set-key (kbd "C-x v SPC") #'git-gutter:mark-hunk)
  
    :custom
    (git-gutter:update-interval 2))
  
#+end_src

** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** SmartParens
[[https://github.com/Fuco1/smartparens][smartparens]] is used to auto-close delimiters and blocks while typing.

#+begin_src emacs-lisp

  (use-package smartparens
    :config
    ;; Disable overlays
    (setq sp-highlight-pair-overlay nil
          sp-highlight-wrap-overlay nil
          sp-highlight-wrap-tag-overlay nil)
    (require 'smartparens-config)
    (smartparens-global-mode 1))

#+end_src

** Tab Auto-detection
With [[https://github.com/jscheid/dtrt-indent][dtrt-indent]] tabs settings will get automatically updated based on the current open file.  This is helpful when your normal tab size is 2, but your editing a file that has a tab size of 4, and in some modes (such as ~c-mode~) Emacs will sometimes reindent as you type which is annoying when the file's indent-size is different from Emacs' current settings.

#+begin_src emacs-lisp

  (use-package dtrt-indent
    :hook (prog-mode . dtrt-indent-mode)
    :config
    (setq dtrt-indent-run-after-smie t))

#+end_src

** Meson
[[https://github.com/wentasah/meson-mode][meson-mode]] is a major mode for editing meson build files.

#+begin_src emacs-lisp

  (use-package meson-mode)

#+end_src

* Terminals
** term-mode
~term-mode~ is a built-in terminal emulator in Emacs. Because it is written in Emacs Lisp, you can start using it immediately with very little configuration. If you are on Linux or macOS, ~term-mode~ is a great choice to get started because it supports fairly complex terminal applications (~htop~, ~vim~, etc) and works pretty reliably. However, because it is written in Emacs Lisp, it can be slower than other options like ~vterm~. The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is ~line-mode~ versus ~char-mode~. ~line-mode~ enables you to use normal Emacs keybindings while moving around in the terminal buffer while ~char-mode~ sends most of your keypresses to the underlying terminal. While using ~term-mode~, you will want to be in ~char-mode~ for any terminal applications that have their own keybindings. If you’re just in your usual shell, ~line-mode~ is sufficient and feels more integrated with Emacs.

With ~evil-collection~ installed, you will automatically switch to ~char-mode~ when you enter Evil’s insert mode (press ~i~). You will automatically be switched back to ~line-mode~ when you enter Evil’s normal mode (press ~ESC~).

Run a terminal with ~M-x term~!

Useful key bindings:
- ~C-c C-p~ / ~C-c C-n~ - go back and forward in the buffer’s prompts (also ~\[\[~ and ~\]\]~ with evil-mode)
- ~C-c C-k~ - Enter char-mode
- ~C-c C-j~ - Return to line-mode
If you have ~evil-collection~ installed, ~term-mode~ will enter char mode when you use Evil’s Insert mode

#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "zsh")
    ;; (setq explicit-zsh-args '())
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

NOTE: term-mode doesn't work on Windows

** For better color support
The ~eterm-256color~ package enhances the output of ~term-mode~ to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to. Keep in mind that this package requires ~ncurses~ to be installed on your machine so that it has access to the ~tic~ program. Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm (emacs-libvterm)
[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications. This enables it to be much faster than ~term-mode~ and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use ~vterm~ because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-shell "zsh")
    (setq vterm-max-scrollback 10000)

    ;; Allow vterm to change the current directory
    (add-to-list 'vterm-eval-cmds '("update-pwd"
                                    (lambda (path)
                                             (setq default-directory path)))))

#+end_src

** shell-mode
~shell-mode~ is a middle ground between ~term-mode~ and Eshell. It is *not* a terminal emulator so more complex terminal programs will not run inside of it. It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter. This means that you can use ~evil-mode~'s editing motions on the command line, unlike in the terminal emulator modes above.

Useful key bindings:
- ~C-c C-p~ / ~C-c C-n~ - go back and forward in the buffer’s prompts (also ~\[\[~ and ~\]\]~ with evil-mode)
- ~M-p~ / ~M-n~ - go back and forward in the input history
- ~C-c C-u~ - delete the current input string backwards up to the cursor
- ~counsel-esh-history~ - A searchable history of commands typed into the shell

One advantage of ~shell-mode~ on Windows is that it’s the only way to run ~cmd.exe~, PowerShell, Git Bash, etc from within Emacs. Here’s an example of how you would set up ~shell-mode~ to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

** Eshell
[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs’ own shell implementation written in Emacs Lisp. It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (~ls~, ~rm~, ~mv~, ~grep~, etc). It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing ~vim~ to ~find-file~). Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don’t work as well. However, many of these limitations can be dealt with by good configuration and installing external packages, so don’t let that discourage you from trying it!

Useful key bindings:
- ~C-c C-p~ / ~C-c C-n~ - go back and forward in the buffer’s prompts (also ~\[\[~ and ~\]\]~ with evil-mode)
- ~M-p~ / ~M-n~ - go back and forward in the input history
- ~C-c C-u~ - delete the current input string backwards up to the cursor
- ~counsel-esh-history~ - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun jimjam/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . jimjam/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destory-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))

#+end_src

* File Management
** Ranger (ranger emulation for dired)
[[https://github.com/ralesi/ranger.el#installation][ranger.el]] is a package that makes dired act more like the terminal file manager ~ranger~.

#+begin_src emacs-lisp

   (use-package ranger
     :config (ranger-override-dired-mode t)
     :custom
     (ranger-show-literal nil))

#+end_src

* Better EDITOR integration
The with-editor package (from magit) utilizes ~emacsclient~ and daemon functionality to provide better integration with terminals inside emacs.
Basically it allows you to run a program that calls the ~EDITOR~ environment variable to open a emacs buffer within the current emacs frame.

#+begin_src emacs-lisp
  
  (defun jimjam/setup-with-editor ()
    (dolist (mode '(shell-mode-hook
                    eshell-mode-hook
                    term-exec-hook
                    vterm-mode-hook))
      (add-hook mode 'with-editor-export-editor)))
  
  (use-package with-editor
    :config
    (jimjam/setup-with-editor))
  
#+end_src

* Start Emacs Daemon
So, in my system's environment variables I set ~EDITOR~ and ~VISUAL~ to ~emacsclient -a ~/.local/bin/emacs-nw.sh~ and inside the ~emacs-nw.sh~ has...

#+begin_src shell

  #!/bin/sh
  exec emacs -nw "$@"
  
#+end_src

The idea is that when a terminal program asks for an editor ~emacsclient~ will try to open the file in a running emacs daemon.  If it's able to connect to an emacs daemon it'll open the program's file in a new buffer, but it ~emacsclient~ can't find an emacs daemon it'll simply call the ~--alternative-editor~, or ~-a~, which in this case will open emacs inside the current terminal.

In order for this to work properly emacs needs to start a daemon on launch.

#+begin_src emacs-lisp

  ;; Make current emacs session a daemon if a server isn't already running.
  (unless (server-running-p) (server-start))

#+end_src

* Misc
Some stuff that hasn't been covered by Emacs from Scratch yet, or just some personal emacs stuff.

** Elcord
[[https://github.com/Mstrodl/elcord][elcord]] is a package that adds Discord Rich Presence to Emacs. It basically updates your Discord status to let everyone know your currently using Emacs.

I've added the code from [[https://github.com/Mstrodl/elcord/issues/17][this issue]] which tells elcord to stop when no frames are visible.  This allows using emacs as a daemon without elcord from constantly telling Discord that you're editing the stratch buffer dispite not having any frames open.

#+begin_src emacs-lisp
  
  (defun elcord--enable-on-frame-created (f)
    (elcord-mode +1))
  
  (defun elcord--disable-elcord-if-no-frames (f)
    (when (let ((frames (delete f (visible-frame-list))))
            (or (null frames)
                (and (null (cdr frames))
                     (eq (car frames) terminal-frame))))
      (elcord-mode -1)
      (add-hook 'after-make-frame-functions 'elcord--enable-on-frame-created)))
  
  (defun jimjam/elcord-mode-hook ()
    (if elcord-mode
        (add-hook 'delete-frame-functions 'elcord--disable-elcord-if-no-frames)
      (remove-hook 'delete-frame-functions 'elcord--disable-elcord-if-no-frames)))
  
  (use-package elcord
    :config
    (setq elcord-quiet t)
    (add-hook 'elcord-mode-hook 'jimjam/elcord-mode-hook)
    (elcord-mode 1))
  
#+end_src

** Ebuild Mode
ebuild-mode is a Emacs mode designed to work with Gentoo's ebuild files. It also has various commands for running ebuild commands within Emacs.

Normally I'd install this using some sort of emacs package manager, but it looks like the normal ~app-emacs/ebuild-mode~ package is working without issue.  It even automatically enables it for ebuild files and others.
